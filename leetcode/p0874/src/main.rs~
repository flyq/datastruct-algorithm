fn main() {
    println!("Hello, world!");
}
pub struct Solution{}

enum Dir {
    N,
    E,
    S,
    W,
}

pub struct Point {
    x: i32,
    y: i32,
}

impl Solution {
    pub fn robot_sim(commands: Vec<i32>, obstacles: Vec<Vec<i32>>) -> i32 {
        let mut max = 0;
        let mut dir = Dir::N;
        let mut p = Point {
            x: 0,
            y: 0,
        };
        for i in  0..commands.len() {
            if commands[i] < 0 {
                dir = Solution::direct_change(dir, commands[i]);
                continue;
            } else if commands[i] == 0 {
                continue;
            } else {
                match dir {
                    Dir::N => p.y += commands[i];
                    Dir::S => p.y -= commands[i];
                    Dir::E => p.x += commands[i];
                    Dir::W => p.x += commands[i];
                }
                let temp = p.x.pow(2) + p.y.pow(2);
                if temp > max {
                    max = temp;
                }
            }
        }
    }

    pub fn direct_change(now: Dir, change: i32) -> Dir {
        match now {
            Dir::N => {
                if change == -1 {
                    return Dir::E;
                } else {
                    return Dir::W;
                }
            }
            Dir::E => {
                if change == -1 {
                    return Dir::S;
                } else {
                    return Dir::N;
                }
            }
            Dir::S => {
                if change == -1 {
                    return Dir::W;
                } else {
                    return Dir::E;
                }
            }
            Dir::W => {
                if change == -1 {
                    return Dir::N;
                } else {
                    return Dir::S;
                }
            }
        }
        Dir::N
    }

    pub fn have_obstacle(start: Point, end: Point, obs: Vec<Vec<i32>>) ->
        
}
