fn main() {
    println!("Hello, world!");
}

pub struct Solution {}

#[derive(Debug, PartialEq, Eq)]
pub struct TreeNode {
    pub val: i32,
    pub left: Option<Rc<RefCell<TreeNode>>>,
    pub right: Option<Rc<RefCell<TreeNode>>>,
}

impl TreeNode {
    #[inline]
    pub fn new(val: i32) -> Self {
        TreeNode {
            val,
            left: None,
            right: None,
        }
    }
}

use std::cell::RefCell;
use std::rc::Rc;

impl Solution {
    pub fn sorted_array_to_bst(nums: Vec<i32>) -> Option<Rc<RefCell<TreeNode>>> {
        if nums.len() == 0 {
            None
        }
        let slice: &[i32] = &nums;
        let root = Rc::new(RefCell::new(TreeNode {
            val: slice[slice.len() / 2],
            left: None,
            right: None,
        }));

        Self::gen_bst(
            Some(Rc::clone(&root)),
            &slice[0..slice.len() / 2],
            &slice[slice.len() / 2 + 1..slice.len()],
        );

        Some(root)
    }

    fn gen_bst(root: Option<Rc<RefCell<TreeNode>>>, left: &[i32], right: &[i32]) {
        let node = root.unwrap();

        if left.len() != 0 {
            let left_node = Rc::new(RefCell::new(TreeNode {
                val: left[left.len() / 2],
                left: None,
                right: None,
            }));

            Self::gen_bst(
                Some(Rc::clone(&left_node)),
                &left[0..left.len() / 2],
                &left[left.len() / 2 + 1..left.len()],
            );

            node.borrow_mut().left = Some(Rc::clone(&left_node));
        }

        if right.len() != 0 {
            let right_node = Rc::new(RefCell::new(TreeNode {
                val: right[right.len() / 2],
                left: None,
                right: None,
            }));

            Self::gen_bst(
                Some(Rc::clone(&right_node)),
                &right[0..right.len() / 2],
                &right[right.len() / 2 + 1..right.len()],
            );

            node.borrow_mut().right = Some(Rc::clone(&right_node));
        }
    }
}
